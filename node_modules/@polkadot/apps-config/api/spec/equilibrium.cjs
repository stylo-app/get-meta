"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _memo = require("@polkadot/api-derive/util/memo");

var _xRxjs = require("@polkadot/x-rxjs");

var _operators = require("@polkadot/x-rxjs/operators");

// Copyright 2017-2021 @polkadot/apps-config authors & contributors
// SPDX-License-Identifier: Apache-2.0
const definitions = {
  types: [{
    // on all versions
    minmax: [0, undefined],
    types: {
      Address: 'AccountId',
      Balance: 'u64',
      BalanceOf: 'Balance',
      BalancesAggregate: {
        total_issuance: 'Balance',
        total_debt: 'Balance'
      },
      BlockNumber: 'u64',
      ChainId: 'u8',
      Currency: {
        _enum: ['Unknown', 'Usd', 'EQ', 'Eth', 'Btc', 'Eos', 'Dot']
      },
      DataPoint: {
        price: 'u64',
        account_id: 'AccountId',
        block_number: 'BlockNumber',
        timestamp: 'u64'
      },
      DepositNonce: 'u64',
      FixedI64: 'i64',
      Keys: 'SessionKeys3',
      LookupSource: 'AccountId',
      OperationRequest: {
        account: 'AccountId',
        authority_index: 'AuthIndex',
        validators_len: 'u32',
        block_num: 'BlockNumber'
      },
      PricePayload: 'Data',
      PricePeriod: {
        _enum: ['Min', 'TenMin', 'Hour', 'FourHour', 'Day']
      },
      PricePoint: {
        block_number: 'BlockNumber',
        timestamp: 'u64',
        price: 'u64',
        data_points: 'Vec<DataPoint>'
      },
      ProposalStatus: {
        _enum: ['Initiated', 'Approved', 'Rejected']
      },
      ProposalVotes: {
        votes_for: 'Vec<AccountId>',
        votes_against: 'Vec<AccountId>',
        status: 'ProposalStatus',
        expiry: 'BlockNumber'
      },
      ReinitRequest: {
        account: 'AccountId',
        authority_index: 'AuthIndex',
        validators_len: 'u32',
        block_num: 'BlockNumber'
      },
      ResourceId: '[u8; 32]',
      SignedBalance: {
        _enum: {
          Positive: 'Balance',
          Negative: 'Balance'
        }
      },
      SubAccType: {
        _enum: ['Bailsman', 'Borrower', 'Lender']
      },
      TotalAggregates: {
        collateral: 'Balance',
        debt: 'Balance'
      },
      TransferReason: {
        _enum: ['Common', 'InterestFee', 'MarginCall', 'BailsmenRedistribution', 'TreasuryEqBuyout', 'TreasuryBuyEq', 'Subaccount']
      },
      UserGroup: {
        _enum: ['Unknown', 'Balances', 'Bailsmen', 'Borrowers', 'Lenders']
      },
      VestingInfo: {
        locked: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      }
    }
  }],
  derives: {
    // TODO derive.democracy.locks
    // TODO derice.staking.account
    balances: {
      account: (instanceId, api) => (0, _memo.memo)(instanceId, address => api.derive.accounts.accountId(address).pipe((0, _operators.switchMap)(accountId => accountId ? (0, _xRxjs.combineLatest)([(0, _xRxjs.of)(accountId), api.queryMulti([[api.query.system.account, accountId]]).pipe((0, _operators.map)(raw => {
        if (raw.length < 1) {
          throw new Error('Data expected');
        }

        const data = raw;
        return [data[0].nonce];
      }))]) : (0, _xRxjs.of)([api.registry.createType('AccountId'), [api.registry.createType('Index')]])), (0, _operators.map)(([, [accountNonce]]) => ({
        accountNonce
      })))),
      all: (instanceId, api) => (0, _memo.memo)(instanceId, address => api.derive.accounts.accountId(address).pipe((0, _operators.switchMap)(accountId => accountId ? (0, _xRxjs.combineLatest)([(0, _xRxjs.of)(accountId), api.queryMulti([[api.query.balances.account, [accountId, 'EQ']], [api.query.eqVesting.vested, accountId], [api.query.eqVesting.vesting, accountId], [api.query.system.account, accountId]]).pipe((0, _operators.map)(raw => {
        if (raw.length < 4) {
          throw new Error('4 members expected');
        }

        const res = raw;
        const freeBalance = res[0].asPositive;
        let reservedBalance = api.registry.createType('Balance');
        let vestingLocked = api.registry.createType('Balance');

        if (res[1].isSome && res[2].isSome) {
          const vested = res[1].unwrap();
          const info = res[2].unwrap();
          vestingLocked = info.locked;
          reservedBalance = api.registry.createType('Balance', vestingLocked.sub(vested));
        }

        return [freeBalance, reservedBalance, vestingLocked, res[3].nonce];
      }))]) : (0, _xRxjs.of)([api.registry.createType('AccountId'), [api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Index')]])), (0, _operators.map)(([accountId, [freeBalance, reservedBalance, vestingLocked, accountNonce]]) => ({
        accountId,
        accountNonce,
        additional: [],
        freeBalance,
        lockedBalance: vestingLocked,
        lockedBreakdown: [],
        reservedBalance,
        vestingLocked
      }))))
    }
  }
};
var _default = definitions;
exports.default = _default;