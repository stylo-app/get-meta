import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Copyright 2017-2021 @polkadot/apps-config authors & contributors
// SPDX-License-Identifier: Apache-2.0
export function expandLinked(input) {
  return input.reduce((result, entry) => {
    result.push(entry);
    return entry.linked ? result.concat(expandLinked(entry.linked).map(child => {
      child.genesisHashRelay = entry.genesisHash;
      child.isChild = true;
      return child;
    })) : result;
  }, []);
}
export function expandEndpoint(t, input) {
  const {
    dnslink,
    genesisHash,
    info,
    isChild,
    isDisabled,
    linked,
    paraId,
    providers,
    text
  } = input;
  const base = {
    genesisHash,
    info,
    isChild,
    isDisabled,
    paraId,
    text
  };
  const result = Object.entries(providers).map(([host, value], index) => _objectSpread(_objectSpread({}, base), {}, {
    dnslink: index === 0 ? dnslink : undefined,
    textBy: t('rpc.hosted.by', 'hosted by {{host}}', {
      ns: 'apps-config',
      replace: {
        host
      }
    }),
    value
  }));

  if (linked) {
    const last = result[result.length - 1];
    const options = [];
    linked.forEach(o => options.push(...expandEndpoint(t, o)));
    last.linked = options;
  }

  return expandLinked(result);
}
export function expandEndpoints(t, input) {
  return input.reduce((result, input) => result.concat(expandEndpoint(t, input)), []);
}