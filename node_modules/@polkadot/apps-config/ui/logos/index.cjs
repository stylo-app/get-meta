"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emptyLogos = exports.externalLogos = exports.extensionLogos = exports.namedLogos = exports.nodeLogos = exports.chainLogos = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _dusty = _interopRequireDefault(require("./chains/dusty.png"));

var _hydrate = _interopRequireDefault(require("./chains/hydrate.png"));

var _kusama = _interopRequireDefault(require("./chains/kusama-128.gif"));

var _polkabtc = _interopRequireDefault(require("./chains/polkabtc.png"));

var _rococo = _interopRequireDefault(require("./chains/rococo.svg"));

var _rococoTick = _interopRequireDefault(require("./chains/rococo-tick.svg"));

var _rococoTrack = _interopRequireDefault(require("./chains/rococo-track.svg"));

var _rococoTrick = _interopRequireDefault(require("./chains/rococo-trick.svg"));

var _snakenet = _interopRequireDefault(require("./chains/snakenet.svg"));

var _unique = _interopRequireDefault(require("./chains/unique.png"));

var _polkadotJs = _interopRequireDefault(require("./extensions/polkadot-js.svg"));

var _commonwealth = _interopRequireDefault(require("./external/commonwealth.png"));

var _polkascan = _interopRequireDefault(require("./external/polkascan.png"));

var _polkassembly = _interopRequireDefault(require("./external/polkassembly.png"));

var _polkastats = _interopRequireDefault(require("./external/polkastats.png"));

var _subscan = _interopRequireDefault(require("./external/subscan.svg"));

var _acalaCircle = _interopRequireDefault(require("./nodes/acala-circle.svg"));

var _ares = _interopRequireDefault(require("./nodes/ares.svg"));

var _bifrost = _interopRequireDefault(require("./nodes/bifrost.svg"));

var _bitcountry = _interopRequireDefault(require("./nodes/bitcountry.svg"));

var _canvas = _interopRequireDefault(require("./nodes/canvas-2.png"));

var _centrifuge = _interopRequireDefault(require("./nodes/centrifuge.png"));

var _chainx = _interopRequireDefault(require("./nodes/chainx.svg"));

var _clover = _interopRequireDefault(require("./nodes/clover.svg"));

var _crab = _interopRequireDefault(require("./nodes/crab.svg"));

var _crust = _interopRequireDefault(require("./nodes/crust.svg"));

var _darwinia = _interopRequireDefault(require("./nodes/darwinia.png"));

var _datahighway = _interopRequireDefault(require("./nodes/datahighway.png"));

var _dockMainnet = _interopRequireDefault(require("./nodes/dock-mainnet.png"));

var _dockTestnet = _interopRequireDefault(require("./nodes/dock-testnet.png"));

var _dotmog = _interopRequireDefault(require("./nodes/dotmog.svg"));

var _edgewareCircle = _interopRequireDefault(require("./nodes/edgeware-circle.svg"));

var _encointerNotee = _interopRequireDefault(require("./nodes/encointer-notee.svg"));

var _encointerTeeproxy = _interopRequireDefault(require("./nodes/encointer-teeproxy.svg"));

var _equilibrium = _interopRequireDefault(require("./nodes/equilibrium.svg"));

var _hanonycash = _interopRequireDefault(require("./nodes/hanonycash.svg"));

var _idavoll = _interopRequireDefault(require("./nodes/idavoll.png"));

var _integritee = _interopRequireDefault(require("./nodes/integritee.svg"));

var _jupiter = _interopRequireDefault(require("./nodes/jupiter.svg"));

var _kilt = _interopRequireDefault(require("./nodes/kilt.svg"));

var _kulupu = _interopRequireDefault(require("./nodes/kulupu.svg"));

var _laminarCircle = _interopRequireDefault(require("./nodes/laminar-circle.svg"));

var _litentry = _interopRequireDefault(require("./nodes/litentry.png"));

var _math = _interopRequireDefault(require("./nodes/math.svg"));

var _moonbeam = _interopRequireDefault(require("./nodes/moonbeam.png"));

var _nodle = _interopRequireDefault(require("./nodes/nodle.svg"));

var _phala = _interopRequireDefault(require("./nodes/phala.svg"));

var _plasm = _interopRequireDefault(require("./nodes/plasm.png"));

var _polkabtc2 = _interopRequireDefault(require("./nodes/polkabtc.png"));

var _polkadex = _interopRequireDefault(require("./nodes/polkadex.svg"));

var _polkadotCircle = _interopRequireDefault(require("./nodes/polkadot-circle.svg"));

var _polkadotJs2 = _interopRequireDefault(require("./nodes/polkadot-js.svg"));

var _robonomics = _interopRequireDefault(require("./nodes/robonomics.svg"));

var _sgc = _interopRequireDefault(require("./nodes/sgc.svg"));

var _soraSubstrate = _interopRequireDefault(require("./nodes/sora-substrate.svg"));

var _stafi = _interopRequireDefault(require("./nodes/stafi.png"));

var _subdao = _interopRequireDefault(require("./nodes/subdao.png"));

var _subsocial = _interopRequireDefault(require("./nodes/subsocial.svg"));

var _substrateHexagon = _interopRequireDefault(require("./nodes/substrate-hexagon.svg"));

var _ternoa = _interopRequireDefault(require("./nodes/ternoa.svg"));

var _trustbase = _interopRequireDefault(require("./nodes/trustbase.png"));

var _uniarts = _interopRequireDefault(require("./nodes/uniarts.png"));

var _unique2 = _interopRequireDefault(require("./nodes/unique.png"));

var _zenlink = _interopRequireDefault(require("./nodes/zenlink.svg"));

var _zero = _interopRequireDefault(require("./nodes/zero.svg"));

var _empty = _interopRequireDefault(require("./empty.svg"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Alphabetical overrides based on the actual matched chain name
// NOTE: This is as retrieved via system.chain RPC
const chainLogos = [['Ares PC1', _ares.default], ['Crust PC1', _crust.default], ['ChainX', _chainx.default], ['darwinia crab', _crab.default], ['Darwinia PC2', _darwinia.default], ['DataHighway', _datahighway.default], ['Dusty', _dusty.default], ['Galois', _math.default], ['HydraDX Hydrate', _hydrate.default], ['HydraDX Snakenet', _snakenet.default], ['Encointer PC1', _encointerNotee.default], ['Idavoll', _idavoll.default], ['IntegriTEE PC1', _integritee.default], ['Jupiter A1', _jupiter.default], ['Jupiter PC1', _jupiter.default], ['KILT PC1', _kilt.default], ['Kusama', _kusama.default], // new name after CC3
['Kusama CC1', _kusama.default], ['Kusama CC2', _kusama.default], ['Kusama CC3', _kusama.default], ['MathChain PC1', _math.default], ['Moonbase Alpha', _moonbeam.default], ['Moonbase Stage', _moonbeam.default], ['Moonbase Development Testnet', _moonbeam.default], ['PolkaBTC', _polkabtc2.default], ['PolkaBTC Staging', _polkabtc2.default], ['Polkadex Testnet', _polkadex.default], ['Phala PC1', _phala.default], ['Rococo', _rococo.default], ['Sgc', _sgc.default], ['Tick', _rococoTick.default], ['Track', _rococoTrack.default], ['Trick', _rococoTrick.default], ['TrustBase PC1', _trustbase.default], ['Uniarts', _uniarts.default], ['Unique', _unique.default]].reduce((logos, [chain, logo]) => _objectSpread(_objectSpread({}, logos), {}, {
  [chain.toLowerCase()]: logo
}), {}); // Alphabetical overrides based on the actual software node type
// NOTE: This is as retrieved via system.name RPC

exports.chainLogos = chainLogos;
const nodeLogos = [['Acala Node', _acalaCircle.default], ['Ares Node', _ares.default], ['Ares Parachain Collator', _ares.default], ['mandala node', _acalaCircle.default], ['airalab-robonomics', _robonomics.default], ['Bifrost Node', _bifrost.default], ['Bifrost', _bifrost.default], ['BitCountry Node', _bitcountry.default], ['Bit.Country', _bitcountry.default], ['Bit Country Tewai Parachain Collator', _bitcountry.default], ['Canvas Node', _canvas.default], ['centrifuge chain', _centrifuge.default], ['Centrifuge Chain Node', _centrifuge.default], ['ChainX Node', _chainx.default], ['Clover Node', _clover.default], ['darwinia crab', _crab.default], ['crust', _crust.default], ['Crust Collator', _crust.default], ['darwinia', _darwinia.default], ['darwinia parachain', _darwinia.default], ['Darwinia Runtime Module Library', _darwinia.default], ['DataHighway', _datahighway.default], ['DataHighway Node', _datahighway.default], ['DataHighway Parachain Collator', _datahighway.default], ['Dock Full Node', _dockMainnet.default], ['DOTMog Node', _dotmog.default], ['Edgeware Node', _edgewareCircle.default], ['Encointer Node', _encointerNotee.default], ['Encointer Node noTEE', _encointerNotee.default], ['Encointer Node TEE proxy', _encointerTeeproxy.default], ['Galois', _math.default], ['hanonycash', _hanonycash.default], ['Idavoll Node', _idavoll.default], ['KILT Node', _kilt.default], ['KILT Collator', _kilt.default], ['kulupu', _kulupu.default], ['Laminar Node', _laminarCircle.default], ['Litentry Collator', _litentry.default], ['node-template', _substrateHexagon.default], ['Nodle Chain Node', _nodle.default], ['Patract Node', _jupiter.default], ['Polkadex Node', _polkadex.default], ['parity-polkadot', _polkadotCircle.default], ['Plasm', _plasm.default], ['Plasm Node', _plasm.default], ['Plasm Parachain Collator', _plasm.default], ['phala-substrate-node', _phala.default], ['Phala Collator', _phala.default], ['polkadot-js', _polkadotJs2.default], ['Sgc', _sgc.default], ['SORA-staging Node', _soraSubstrate.default], ['Stafi Node', _stafi.default], ['Stafi', _stafi.default], ['subsocial-node', _subsocial.default], ['substrate-node', _substrateHexagon.default], ['Equilibrium Node', _equilibrium.default], ['Equilibrium', _equilibrium.default], ['SUBZΞRO', _zero.default], ['Ternoa Node', _ternoa.default], ['TrustBase Node', _trustbase.default], ['TrustBase Collator', _trustbase.default], ['Zenlink', _zenlink.default], ['Zenlink Collator', _zenlink.default], ['SubDAO Collator', _subdao.default], ['Uniarts', _uniarts.default], ['Unique Node', _unique2.default]].reduce((logos, [node, logo]) => _objectSpread(_objectSpread({}, logos), {}, {
  [node.toLowerCase().replace(/-/g, ' ')]: logo
}), {}); // Alphabetical overrides when we pass an explicit logo name
// NOTE: Matches with what is defined as "info" in settings/endpoints.ts
// (Generally would be the 'network' key in the known ss58 as per
// https://github.com/polkadot-js/common/blob/master/packages/networks/src/index.ts)

exports.nodeLogos = nodeLogos;
const namedLogos = {
  acala: _acalaCircle.default,
  alexander: _polkadotCircle.default,
  bifrost: _bifrost.default,
  bitcountry: _bitcountry.default,
  canvas: _canvas.default,
  centrifuge: _centrifuge.default,
  chainx: _chainx.default,
  clover: _clover.default,
  crab: _crab.default,
  crust: _crust.default,
  darwinia: _darwinia.default,
  datahighway: _datahighway.default,
  'dock-mainnet': _dockMainnet.default,
  'dock-testnet': _dockTestnet.default,
  dotmog: _dotmog.default,
  dusty: _dusty.default,
  edgeware: _edgewareCircle.default,
  empty: _empty.default,
  encointer_cantillon: _encointerTeeproxy.default,
  encointer_gesell: _encointerNotee.default,
  equilibrium: _equilibrium.default,
  galois: _math.default,
  hanonycash: _hanonycash.default,
  idavoll: _idavoll.default,
  jupiter: _jupiter.default,
  kilt: _kilt.default,
  kulupu: _kulupu.default,
  kusama: _kusama.default,
  laminar: _laminarCircle.default,
  moonbaseAlpha: _moonbeam.default,
  nodle: _nodle.default,
  phala: _phala.default,
  plasm: _plasm.default,
  polkabtc: _polkabtc2.default,
  polkadex: _polkadex.default,
  polkadot: _polkadotCircle.default,
  rococo: _rococo.default,
  rococoAcala: _acalaCircle.default,
  rococoAres: _ares.default,
  rococoBifrost: _bifrost.default,
  rococoBitCountry: _bitcountry.default,
  rococoChainX: _chainx.default,
  rococoClover: _clover.default,
  rococoCrust: _crust.default,
  rococoDarwinia: _darwinia.default,
  rococoDataHighway: _datahighway.default,
  rococoEncointer: _encointerNotee.default,
  rococoHydrate: _hydrate.default,
  rococoIdavoll: _idavoll.default,
  rococoIntegritee: _integritee.default,
  rococoJupiter: _jupiter.default,
  rococoKilt: _kilt.default,
  rococoLaminar: _laminarCircle.default,
  rococoLitentry: _litentry.default,
  rococoMathChain: _math.default,
  rococoPhala: _phala.default,
  rococoPlasm: _plasm.default,
  rococoPolkabtc: _polkabtc.default,
  rococoRobonomics: _robonomics.default,
  rococoSubDAO: _subdao.default,
  rococoTick: _rococoTick.default,
  rococoTrack: _rococoTrack.default,
  rococoTrick: _rococoTrick.default,
  rococoTrustBase: _trustbase.default,
  rococoZenlink: _zenlink.default,
  sgc: _sgc.default,
  snakenet: _snakenet.default,
  'sora-substrate': _soraSubstrate.default,
  stafi: _stafi.default,
  subsocial: _subsocial.default,
  substrate: _substrateHexagon.default,
  'ternoa-chaos': _ternoa.default,
  uniarts: _uniarts.default,
  unique: _unique2.default,
  westend: _polkadotCircle.default,
  zero: _zero.default
}; // extension logos

exports.namedLogos = namedLogos;
const extensionLogos = {
  'polkadot-js': _polkadotJs.default
}; // external logos, i.e. for explorers

exports.extensionLogos = extensionLogos;
const externalLogos = {
  commonwealth: _commonwealth.default,
  polkascan: _polkascan.default,
  polkassembly: _polkassembly.default,
  polkastats: _polkastats.default,
  subscan: _subscan.default
}; // empty logos

exports.externalLogos = externalLogos;
const emptyLogos = {
  empty: _empty.default
}; // preload all

exports.emptyLogos = emptyLogos;
[chainLogos, extensionLogos, externalLogos, namedLogos, nodeLogos, emptyLogos].forEach(imageSet => {
  Object.values(imageSet).forEach(src => {
    new Image().src = src;
  });
});