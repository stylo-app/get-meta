"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newLogger = void 0;
const chalk_1 = __importDefault(require("chalk"));
const loglevel_1 = __importStar(require("loglevel"));
const loglevel_plugin_prefix_1 = __importDefault(require("loglevel-plugin-prefix"));
require('dotenv').config();
const defaultLevel = (process.env.LOG_LEVEL || 'INFO').toUpperCase();
loglevel_1.setDefaultLevel(defaultLevel);
const colors = {
    TRACE: chalk_1.default.magenta,
    DEBUG: chalk_1.default.cyan,
    INFO: chalk_1.default.blue,
    WARN: chalk_1.default.yellow,
    ERROR: chalk_1.default.red,
    SILENT: chalk_1.default.gray
};
loglevel_plugin_prefix_1.default.reg(loglevel_1.default);
loglevel_1.default.enableAll();
loglevel_plugin_prefix_1.default.apply(loglevel_1.default, {
    format(_level, _name, _time) {
        const now = new Date();
        const date = now.getMonth() + '-' + now.getDay();
        const time = _time.toString();
        const level = colors[_level.toUpperCase()](_level) +
            // Add an extra space if level == INFO or WARN
            (_level.length < 5 ? ' ' : '');
        const name = chalk_1.default.green(_name);
        return `${date} ${time} ${level} ${name}:`;
    }
});
exports.newLogger = (name = 'Subsocial', level) => {
    const logger = loglevel_1.default.getLogger(name);
    logger.setLevel(level || defaultLevel);
    return logger;
};
