import { u64, Null, Enum, Option, Struct } from '@polkadot/types';
import { PostId, PostExtension as IPostExtension, Comment as IComment } from '../interfaces';
export declare class RegularPost extends Null {
}
export declare class SharedPost extends u64 {
}
declare type CommentType = {
    parent_id: Option<PostId>;
    root_post_id: PostId;
};
export declare class Comment extends Struct implements IComment {
    constructor(value?: CommentType);
    get parent_id(): Option<PostId>;
    get root_post_id(): PostId;
}
export declare type PostExtensionEnum = RegularPost | IComment | SharedPost;
declare type PostExtensionEnumValue = {
    RegularPost: RegularPost;
} | {
    SharedPost: SharedPost;
} | {
    Comment: IComment;
};
export declare class PostExtension extends Enum implements IPostExtension {
    constructor(value?: PostExtensionEnumValue);
    get isComment(): boolean;
    get asComment(): Comment;
    get isRegularPost(): boolean;
    get isSharedPost(): boolean;
    get isSharedComment(): boolean;
    get asSharedPost(): PostId;
}
export {};
