"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typesBundleForPolkadot = exports.typesAlias = exports.rpc = exports.typesBundle = exports.types = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ormlTypeDefinitions = require("@open-web3/orml-type-definitions");

var _utils = require("@open-web3/orml-type-definitions/utils");

var _margin = _interopRequireDefault(require("./margin"));

var _runtime = _interopRequireDefault(require("./runtime"));

var _synthetic = _interopRequireDefault(require("./synthetic"));

var _versioned = _interopRequireDefault(require("./types-known/versioned"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// FIXME: currently we cannot override this in runtime definations because the code generation script cannot handle overrides
// This will make it behave correctly in runtime, but wrong types in TS defination.
const additionalOverride = {
  Keys: 'SessionKeys2'
};
const laminarDefs = {
  margin: _margin.default,
  runtime: _runtime.default,
  synthetic: _synthetic.default
};

const types = _objectSpread(_objectSpread(_objectSpread({}, _ormlTypeDefinitions.types), (0, _utils.typesFromDefs)(laminarDefs)), additionalOverride);

exports.types = types;
const typesBundle = {
  spec: {
    laminar: {
      types: _versioned.default
    }
  }
};
exports.typesBundle = typesBundle;
const rpc = (0, _utils.jsonrpcFromDefs)(laminarDefs, _objectSpread({}, _ormlTypeDefinitions.rpc));
exports.rpc = rpc;
const typesAlias = (0, _utils.typesAliasFromDefs)(laminarDefs, _objectSpread({}, _ormlTypeDefinitions.typesAlias)); // Type overrides have priority issues

exports.typesAlias = typesAlias;
const typesBundleForPolkadot = {
  spec: {
    laminar: {
      types: [..._versioned.default].map(version => {
        return {
          minmax: version.minmax,
          types: _objectSpread(_objectSpread({}, types), version.types)
        };
      })
    }
  }
};
exports.typesBundleForPolkadot = typesBundleForPolkadot;