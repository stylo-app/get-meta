"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signedExtensions = exports.typesBundleForPolkadot = exports.typesAlias = exports.rpc = exports.typesBundle = exports.types = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ormlTypeDefinitions = require("@open-web3/orml-type-definitions");

var _utils = require("@open-web3/orml-type-definitions/utils");

var _accounts = _interopRequireDefault(require("./accounts"));

var _auctionManager = _interopRequireDefault(require("./auctionManager"));

var _cdpEngine = _interopRequireDefault(require("./cdpEngine"));

var _dex = _interopRequireDefault(require("./dex"));

var _evm = _interopRequireDefault(require("./evm"));

var _homa = _interopRequireDefault(require("./homa"));

var _incentives = _interopRequireDefault(require("./incentives"));

var _loans = _interopRequireDefault(require("./loans"));

var _nft = _interopRequireDefault(require("./nft"));

var _nomineesElection = _interopRequireDefault(require("./nomineesElection"));

var _primitives = _interopRequireDefault(require("./primitives"));

var _renvmBridge = _interopRequireDefault(require("./renvmBridge"));

var _runtime = _interopRequireDefault(require("./runtime"));

var _signedExtensions = require("./signedExtensions");

var _stakingPool = _interopRequireDefault(require("./stakingPool"));

var _support = _interopRequireDefault(require("./support"));

var _versioned = _interopRequireDefault(require("./types-known/versioned"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// FIXME: currently we cannot override this in runtime definations because the code generation script cannot handle overrides
// This will make it behave correctly in runtime, but wrong types in TS defination.
const additionalOverride = {
  Keys: 'SessionKeys2',
  PalletsOrigin: {
    _enum: {
      System: 'SystemOrigin',
      Timestamp: 'Null',
      RandomnessCollectiveFlip: 'Null',
      Balances: 'Null',
      Accounts: 'Null',
      Currencies: 'Null',
      Tokens: 'Null',
      Vesting: 'Null',
      AcalaTreasury: 'Null',
      Utility: 'Null',
      Multisig: 'Null',
      Recovery: 'Null',
      Proxy: 'Null',
      Scheduler: 'Null',
      Indices: 'Null',
      GraduallyUpdate: 'Null',
      Authorship: 'Null',
      Babe: 'Null',
      Grandpa: 'Null',
      Staking: 'Null',
      Session: 'Null',
      Historical: 'Null',
      GeneralCouncil: 'CollectiveOrigin',
      GeneralCouncilMembership: 'Null',
      HonzonCouncil: 'CollectiveOrigin',
      HonzonCouncilMembership: 'Null',
      HomaCouncil: 'CollectiveOrigin',
      HomaCouncilMembership: 'Null',
      TechnicalCommittee: 'CollectiveOrigin',
      TechnicalCommitteeMembership: 'Null',
      Authority: 'DelayedOrigin',
      ElectionsPhragmen: 'Null',
      AcalaOracle: 'Null',
      BandOracle: 'Null',
      OperatorMembershipAcala: 'Null',
      OperatorMembershipBand: 'Null',
      Auction: 'Null',
      Rewards: 'Null',
      OrmlNFT: 'Null',
      Prices: 'Null',
      Dex: 'Null',
      AuctionManager: 'Null',
      Loans: 'Null',
      Honzon: 'Null',
      CdpTreasury: 'Null',
      CdpEngine: 'Null',
      EmergencyShutdown: 'Null',
      Homa: 'Null',
      NomineesElection: 'Null',
      StakingPool: 'Null',
      PolkadotBridge: 'Null',
      Incentives: 'Null',
      AirDrop: 'Null',
      NFT: 'Null',
      RenVmBridge: 'Null',
      Contracts: 'Null',
      EVM: 'Null',
      Sudo: 'Null',
      TransactionPayment: 'Null'
    }
  }
};
const acalaDefs = {
  accounts: _accounts.default,
  auctionManager: _auctionManager.default,
  cdpEngine: _cdpEngine.default,
  dex: _dex.default,
  evm: _evm.default,
  homa: _homa.default,
  incentives: _incentives.default,
  loans: _loans.default,
  nft: _nft.default,
  nomineesElection: _nomineesElection.default,
  primitives: _primitives.default,
  runtime: _runtime.default,
  stakingPool: _stakingPool.default,
  support: _support.default,
  renvmBridge: _renvmBridge.default
};

const types = _objectSpread(_objectSpread(_objectSpread({}, _ormlTypeDefinitions.types), (0, _utils.typesFromDefs)(acalaDefs)), additionalOverride);

exports.types = types;
const typesBundle = {
  spec: {
    mandala: {
      types: _versioned.default
    },
    acala: {
      types: _versioned.default
    }
  }
};
exports.typesBundle = typesBundle;
const rpc = (0, _utils.jsonrpcFromDefs)(acalaDefs, _objectSpread({}, _ormlTypeDefinitions.rpc));
exports.rpc = rpc;
const typesAlias = (0, _utils.typesAliasFromDefs)(acalaDefs, _objectSpread({}, _ormlTypeDefinitions.typesAlias));
exports.typesAlias = typesAlias;
const bundle = {
  rpc,
  types: [..._versioned.default].map(version => {
    return {
      minmax: version.minmax,
      types: _objectSpread(_objectSpread({}, types), version.types)
    };
  }),
  alias: typesAlias
}; // Type overrides have priority issues

const typesBundleForPolkadot = {
  spec: {
    acala: bundle,
    mandala: bundle
  }
};
exports.typesBundleForPolkadot = typesBundleForPolkadot;
const signedExtensions = _signedExtensions.signedExtensions;
exports.signedExtensions = signedExtensions;