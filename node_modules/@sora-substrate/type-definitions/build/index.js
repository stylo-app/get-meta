"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fullOverrideBundle = exports.slimOverrideBundle = exports.typesAlias = exports.rpc = exports.typesBundle = exports.localTypes = exports.types = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ormlTypeDefinitions = require("@open-web3/orml-type-definitions");

var _utils = require("@open-web3/orml-type-definitions/utils");

var _runtime = _interopRequireDefault(require("./runtime"));

var _dexApi = _interopRequireDefault(require("./dexApi"));

var _dexManager = _interopRequireDefault(require("./dexManager"));

var _tradingPair = _interopRequireDefault(require("./tradingPair"));

var _template = _interopRequireDefault(require("./template"));

var _assets = _interopRequireDefault(require("./assets"));

var _liquidityProxy = _interopRequireDefault(require("./liquidityProxy"));

var _ethBridge = _interopRequireDefault(require("./ethBridge"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const soraDefs = {
  runtime: _runtime.default,
  dexApi: _dexApi.default,
  dexManager: _dexManager.default,
  tradingPair: _tradingPair.default,
  template: _template.default,
  assets: _assets.default,
  liquidityProxy: _liquidityProxy.default,
  ethBridge: _ethBridge.default
};
const overrides = {
  Address: 'AccountId',
  LookupSource: 'AccountId',
  AssetId: 'AssetId32',
  Keys: 'SessionKeys2',
  Balance: 'u128',
  RefCount: 'u32',
  TAssetBalance: 'Balance'
};

const types = _objectSpread(_objectSpread(_objectSpread({}, _ormlTypeDefinitions.types), (0, _utils.typesFromDefs)(soraDefs)), overrides);

exports.types = types;

const localTypes = _objectSpread(_objectSpread({}, (0, _utils.typesFromDefs)(soraDefs)), overrides);

exports.localTypes = localTypes;
const typesBundle = {
  spec: {
    sora: {
      types
    }
  }
};
exports.typesBundle = typesBundle;
const rpc = (0, _utils.jsonrpcFromDefs)(soraDefs, _objectSpread({}, _ormlTypeDefinitions.rpc));
exports.rpc = rpc;
const typesAlias = (0, _utils.typesAliasFromDefs)(soraDefs, _objectSpread({}, _ormlTypeDefinitions.typesAlias));
exports.typesAlias = typesAlias;
const slimOverrideBundle = {
  spec: {
    sora: {
      types: [{
        minmax: [0, 99],
        types
      }]
    }
  }
};
exports.slimOverrideBundle = slimOverrideBundle;
const fullOverrideBundle = {
  spec: {
    sora: {
      alias: typesAlias,
      rpc,
      types: [{
        minmax: [0, 99],
        types
      }]
    }
  }
};
exports.fullOverrideBundle = fullOverrideBundle;