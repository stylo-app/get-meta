import type { ApiTypes } from '@polkadot/api/types';
declare module '@polkadot/api/types/errors' {
    interface AugmentedErrors<ApiType> {
        authorship: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * The uncle is genesis.
             **/
            GenesisUncle: AugmentedError<ApiType>;
            /**
             * The uncle parent not in the chain.
             **/
            InvalidUncleParent: AugmentedError<ApiType>;
            /**
             * The uncle isn't recent enough to be included.
             **/
            OldUncle: AugmentedError<ApiType>;
            /**
             * The uncle is too high in chain.
             **/
            TooHighUncle: AugmentedError<ApiType>;
            /**
             * Too many uncles.
             **/
            TooManyUncles: AugmentedError<ApiType>;
            /**
             * The uncle is already included.
             **/
            UncleAlreadyIncluded: AugmentedError<ApiType>;
            /**
             * Uncles already set in the block.
             **/
            UnclesAlreadySet: AugmentedError<ApiType>;
        };
        balances: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Beneficiary account must pre-exist
             **/
            DeadAccount: AugmentedError<ApiType>;
            /**
             * Value too low to create account due to existential deposit
             **/
            ExistentialDeposit: AugmentedError<ApiType>;
            /**
             * A vesting schedule already exists for this account
             **/
            ExistingVestingSchedule: AugmentedError<ApiType>;
            /**
             * Balance too low to send value
             **/
            InsufficientBalance: AugmentedError<ApiType>;
            /**
             * Transfer/payment would kill account
             **/
            KeepAlive: AugmentedError<ApiType>;
            /**
             * Account liquidity restrictions prevent withdrawal
             **/
            LiquidityRestrictions: AugmentedError<ApiType>;
            /**
             * Lock - POISONED
             **/
            LockP: AugmentedError<ApiType>;
            /**
             * Got an overflow after adding
             **/
            Overflow: AugmentedError<ApiType>;
            /**
             * Vesting balance too high to send value
             **/
            VestingBalance: AugmentedError<ApiType>;
        };
        claims: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Invalid Ethereum signature.
             **/
            InvalidSignature: AugmentedError<ApiType>;
            /**
             * Can NOT Move Claim to an EXISTED Address.
             **/
            MoveToExistedAddress: AugmentedError<ApiType>;
            /**
             * New Address Type - MISMATCHED
             **/
            NewAddressTypeMis: AugmentedError<ApiType>;
            /**
             * There's not enough in the pot to pay out some unvested amount. Generally implies a logic
             * error.
             **/
            PotUnderflow: AugmentedError<ApiType>;
            /**
             * Ethereum address has no claim.
             **/
            SignerHasNoClaim: AugmentedError<ApiType>;
        };
        council: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Members are already initialized!
             **/
            AlreadyInitialized: AugmentedError<ApiType>;
            /**
             * Duplicate proposals not allowed
             **/
            DuplicateProposal: AugmentedError<ApiType>;
            /**
             * Duplicate vote ignored
             **/
            DuplicateVote: AugmentedError<ApiType>;
            /**
             * Account is not a member
             **/
            NotMember: AugmentedError<ApiType>;
            /**
             * Proposal must exist
             **/
            ProposalMissing: AugmentedError<ApiType>;
            /**
             * The close call was made too early, before the end of the voting.
             **/
            TooEarly: AugmentedError<ApiType>;
            /**
             * There can only be a maximum of `MaxProposals` active proposals.
             **/
            TooManyProposals: AugmentedError<ApiType>;
            /**
             * Mismatched index
             **/
            WrongIndex: AugmentedError<ApiType>;
            /**
             * The given length bound for the proposal was too low.
             **/
            WrongProposalLength: AugmentedError<ApiType>;
            /**
             * The given weight bound for the proposal was too low.
             **/
            WrongProposalWeight: AugmentedError<ApiType>;
        };
        democracy: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Cannot cancel the same proposal twice
             **/
            AlreadyCanceled: AugmentedError<ApiType>;
            /**
             * The account is already delegating.
             **/
            AlreadyDelegating: AugmentedError<ApiType>;
            /**
             * Identity may not veto a proposal twice
             **/
            AlreadyVetoed: AugmentedError<ApiType>;
            /**
             * Unknown index
             **/
            BadIndex: AugmentedError<ApiType>;
            /**
             * Preimage already noted
             **/
            DuplicatePreimage: AugmentedError<ApiType>;
            /**
             * Proposal already made
             **/
            DuplicateProposal: AugmentedError<ApiType>;
            /**
             * Imminent
             **/
            Imminent: AugmentedError<ApiType>;
            /**
             * The instant referendum origin is currently disallowed.
             **/
            InstantNotAllowed: AugmentedError<ApiType>;
            /**
             * Too high a balance was provided that the account cannot afford.
             **/
            InsufficientFunds: AugmentedError<ApiType>;
            /**
             * Invalid hash
             **/
            InvalidHash: AugmentedError<ApiType>;
            /**
             * The provided witness data is wrong.
             **/
            InvalidWitness: AugmentedError<ApiType>;
            /**
             * Maximum number of votes reached.
             **/
            MaxVotesReached: AugmentedError<ApiType>;
            /**
             * No proposals waiting
             **/
            NoneWaiting: AugmentedError<ApiType>;
            /**
             * Delegation to oneself makes no sense.
             **/
            Nonsense: AugmentedError<ApiType>;
            /**
             * The actor has no permission to conduct the action.
             **/
            NoPermission: AugmentedError<ApiType>;
            /**
             * No external proposal
             **/
            NoProposal: AugmentedError<ApiType>;
            /**
             * Not delegated
             **/
            NotDelegated: AugmentedError<ApiType>;
            /**
             * The account is not currently delegating.
             **/
            NotDelegating: AugmentedError<ApiType>;
            /**
             * The lock on the account to be unlocked has not yet expired.
             **/
            NotExpired: AugmentedError<ApiType>;
            /**
             * Not imminent
             **/
            NotImminent: AugmentedError<ApiType>;
            /**
             * The target account does not have a lock.
             **/
            NotLocked: AugmentedError<ApiType>;
            /**
             * Next external proposal not simple majority
             **/
            NotSimpleMajority: AugmentedError<ApiType>;
            /**
             * The given account did not vote on the referendum.
             **/
            NotVoter: AugmentedError<ApiType>;
            /**
             * An unexpected integer overflow occurred.
             **/
            Overflow: AugmentedError<ApiType>;
            /**
             * Invalid preimage
             **/
            PreimageInvalid: AugmentedError<ApiType>;
            /**
             * Preimage not found
             **/
            PreimageMissing: AugmentedError<ApiType>;
            /**
             * Proposal still blacklisted
             **/
            ProposalBlacklisted: AugmentedError<ApiType>;
            /**
             * Proposal does not exist
             **/
            ProposalMissing: AugmentedError<ApiType>;
            /**
             * Vote given for invalid referendum
             **/
            ReferendumInvalid: AugmentedError<ApiType>;
            /**
             * Too early
             **/
            TooEarly: AugmentedError<ApiType>;
            /**
             * Maximum number of proposals reached.
             **/
            TooManyProposals: AugmentedError<ApiType>;
            /**
             * An unexpected integer underflow occurred.
             **/
            Underflow: AugmentedError<ApiType>;
            /**
             * Value too low
             **/
            ValueLow: AugmentedError<ApiType>;
            /**
             * The account currently has votes attached to it and the operation cannot succeed until
             * these are removed, either through `unvote` or `reap_vote`.
             **/
            VotesExist: AugmentedError<ApiType>;
            /**
             * Invalid upper bound.
             **/
            WrongUpperBound: AugmentedError<ApiType>;
        };
        electionsPhragmen: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Duplicated candidate submission.
             **/
            DuplicatedCandidate: AugmentedError<ApiType>;
            /**
             * Candidate does not have enough funds.
             **/
            InsufficientCandidateFunds: AugmentedError<ApiType>;
            /**
             * The renouncing origin presented a wrong `Renouncing` parameter.
             **/
            InvalidRenouncing: AugmentedError<ApiType>;
            /**
             * Prediction regarding replacement after member removal is wrong.
             **/
            InvalidReplacement: AugmentedError<ApiType>;
            /**
             * The provided count of number of votes is incorrect.
             **/
            InvalidVoteCount: AugmentedError<ApiType>;
            /**
             * The provided count of number of candidates is incorrect.
             **/
            InvalidWitnessData: AugmentedError<ApiType>;
            /**
             * Cannot vote with stake less than minimum balance.
             **/
            LowBalance: AugmentedError<ApiType>;
            /**
             * Cannot vote more than maximum allowed.
             **/
            MaximumVotesExceeded: AugmentedError<ApiType>;
            /**
             * Member cannot re-submit candidacy.
             **/
            MemberSubmit: AugmentedError<ApiType>;
            /**
             * Must be a voter.
             **/
            MustBeVoter: AugmentedError<ApiType>;
            /**
             * Not a member.
             **/
            NotMember: AugmentedError<ApiType>;
            /**
             * Must vote for at least one candidate.
             **/
            NoVotes: AugmentedError<ApiType>;
            /**
             * Cannot report self.
             **/
            ReportSelf: AugmentedError<ApiType>;
            /**
             * Runner cannot re-submit candidacy.
             **/
            RunnerUpSubmit: AugmentedError<ApiType>;
            /**
             * Cannot vote more than candidates.
             **/
            TooManyVotes: AugmentedError<ApiType>;
            /**
             * Voter can not pay voting bond.
             **/
            UnableToPayBond: AugmentedError<ApiType>;
            /**
             * Cannot vote when no candidates or members exist.
             **/
            UnableToVote: AugmentedError<ApiType>;
        };
        ethereumBacking: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Address - CONVERSION FAILED
             **/
            AddressCF: AugmentedError<ApiType>;
            /**
             * Address Length - MISMATCHED
             **/
            AddrLenMis: AugmentedError<ApiType>;
            /**
             * Array - CONVERSION FAILED
             **/
            ArrayCF: AugmentedError<ApiType>;
            /**
             * Asset - ALREADY REDEEMED
             **/
            AssetAR: AugmentedError<ApiType>;
            /**
             * Authorities Change - ALREADY SYNCED
             **/
            AuthoritiesChangeAR: AugmentedError<ApiType>;
            /**
             * Bytes - CONVERSION FAILED
             **/
            BytesCF: AugmentedError<ApiType>;
            /**
             * Eth Log - PARSING FAILED
             **/
            EthLogPF: AugmentedError<ApiType>;
            /**
             * Int - CONVERSION FAILED
             **/
            IntCF: AugmentedError<ApiType>;
            /**
             * *KTON* Locked - NO SUFFICIENT BACKING ASSETS
             **/
            KtonLockedNSBA: AugmentedError<ApiType>;
            /**
             * Kton Lock - LIMITED
             **/
            KtonLockLim: AugmentedError<ApiType>;
            /**
             * Log Entry - NOT EXISTED
             **/
            LogEntryNE: AugmentedError<ApiType>;
            /**
             * Pubkey Prefix - MISMATCHED
             **/
            PubkeyPrefixMis: AugmentedError<ApiType>;
            /**
             * EthereumReceipt Proof - INVALID
             **/
            ReceiptProofInv: AugmentedError<ApiType>;
            /**
             * Redeem - DISABLED
             **/
            RedeemDis: AugmentedError<ApiType>;
            /**
             * *RING* Locked - NO SUFFICIENT BACKING ASSETS
             **/
            RingLockedNSBA: AugmentedError<ApiType>;
            /**
             * Ring Lock - LIMITED
             **/
            RingLockLim: AugmentedError<ApiType>;
        };
        ethereumRelay: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Already Vote for Aye - DUPLICATED
             **/
            AlreadyVoteForAyeDup: AugmentedError<ApiType>;
            /**
             * Already Vote for Nay - DUPLICATED
             **/
            AlreadyVoteForNayDup: AugmentedError<ApiType>;
            /**
             * Confirmed Blocks - CONFLICT
             **/
            ConfirmedBlocksC: AugmentedError<ApiType>;
            /**
             * Confirmed Header - NOT EXISTED
             **/
            ConfirmedHeaderNE: AugmentedError<ApiType>;
            /**
             * Continuous - INVALID
             **/
            ContinuousInv: AugmentedError<ApiType>;
            /**
             * Header Hash - INVALID
             **/
            HeaderHashInv: AugmentedError<ApiType>;
            /**
             * Header Hash - MISMATCHED
             **/
            HeaderHashMis: AugmentedError<ApiType>;
            /**
             * Header - INVALID
             **/
            HeaderInv: AugmentedError<ApiType>;
            /**
             * MMR - INVALID
             **/
            MMRInv: AugmentedError<ApiType>;
            /**
             * Pending Relay Header Parcel - ALREADY EXISTED
             **/
            PendingRelayHeaderParcelAE: AugmentedError<ApiType>;
            /**
             * Pending Relay Header Parcel - NOT EXISTED
             **/
            PendingRelayHeaderParcelNE: AugmentedError<ApiType>;
            /**
             * EthereumReceipt Proof - INVALID
             **/
            ReceiptProofInv: AugmentedError<ApiType>;
        };
        ethereumRelayAuthorities: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Authorities Count - TOO LOW
             **/
            AuthoritiesCountTL: AugmentedError<ApiType>;
            /**
             * Authorities - MISMATCHED
             **/
            AuthoritiesMis: AugmentedError<ApiType>;
            /**
             * Authority - ALREADY EXISTED
             **/
            AuthorityAE: AugmentedError<ApiType>;
            /**
             * Authority - IN TERM
             **/
            AuthorityIT: AugmentedError<ApiType>;
            /**
             * Authority - NOT EXISTED
             **/
            AuthorityNE: AugmentedError<ApiType>;
            /**
             * Candidate - ALREADY EXISTED
             **/
            CandidateAE: AugmentedError<ApiType>;
            /**
             * Candidate - NOT EXISTED
             **/
            CandidateNE: AugmentedError<ApiType>;
            /**
             * Darwinia MMR Root - NOT READY YET
             **/
            DarwiniaMMRRootNRY: AugmentedError<ApiType>;
            /**
             * Next Authorities - NOT EXISTED
             **/
            NextAuthoritiesNE: AugmentedError<ApiType>;
            /**
             * On Authorities Change - DISABLED
             **/
            OnAuthoritiesChangeDis: AugmentedError<ApiType>;
            /**
             * Scheduled Sign -NOT EXISTED
             **/
            ScheduledSignNE: AugmentedError<ApiType>;
            /**
             * Signature - INVALID
             **/
            SignatureInv: AugmentedError<ApiType>;
            /**
             * Stake - INSUFFICIENT
             **/
            StakeIns: AugmentedError<ApiType>;
            /**
             * Term - MISMATCHED
             **/
            TermMis: AugmentedError<ApiType>;
        };
        ethereumRelayerGame: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Active Games - TOO MANY
             **/
            ActiveGamesTM: AugmentedError<ApiType>;
            /**
             * Existed Affirmation(s) Found - CONFLICT
             **/
            ExistedAffirmationsFoundC: AugmentedError<ApiType>;
            /**
             * Extended Relay Affirmation - NOT EXISTED
             **/
            ExtendedRelayAffirmationNE: AugmentedError<ApiType>;
            /**
             * Game at This Round - CLOSED
             **/
            GameAtThisRoundC: AugmentedError<ApiType>;
            /**
             * Pending Relay Parcel - NOT EXISTED
             **/
            PendingRelayParcelNE: AugmentedError<ApiType>;
            /**
             * Previous Relay Proofs - INCOMPLETE
             **/
            PreviousRelayProofsInc: AugmentedError<ApiType>;
            /**
             * Relay Affirmation - DUPLICATED
             **/
            RelayAffirmationDup: AugmentedError<ApiType>;
            /**
             * Relay Affirmation - NOT EXISTED
             **/
            RelayAffirmationNE: AugmentedError<ApiType>;
            /**
             * Relay Parcel - ALREADY RELAYED
             **/
            RelayParcelAR: AugmentedError<ApiType>;
            /**
             * Relay Proofs Quantity - INVALID
             **/
            RelayProofsQuantityInv: AugmentedError<ApiType>;
            /**
             * Round - MISMATCHED
             **/
            RoundMis: AugmentedError<ApiType>;
            /**
             * Usable *RING* for Stake - INSUFFICIENT
             **/
            StakeIns: AugmentedError<ApiType>;
        };
        evm: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Not enough balance to perform action
             **/
            BalanceLow: AugmentedError<ApiType>;
            /**
             * Calculating total fee overflowed
             **/
            FeeOverflow: AugmentedError<ApiType>;
            /**
             * Gas price is too low.
             **/
            GasPriceTooLow: AugmentedError<ApiType>;
            /**
             * Nonce is invalid
             **/
            InvalidNonce: AugmentedError<ApiType>;
            /**
             * Calculating total payment overflowed
             **/
            PaymentOverflow: AugmentedError<ApiType>;
            /**
             * Withdraw fee failed
             **/
            WithdrawFailed: AugmentedError<ApiType>;
        };
        grandpa: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Attempt to signal GRANDPA change with one already pending.
             **/
            ChangePending: AugmentedError<ApiType>;
            /**
             * A given equivocation report is valid but already previously reported.
             **/
            DuplicateOffenceReport: AugmentedError<ApiType>;
            /**
             * An equivocation proof provided as part of an equivocation report is invalid.
             **/
            InvalidEquivocationProof: AugmentedError<ApiType>;
            /**
             * A key ownership proof provided as part of an equivocation report is invalid.
             **/
            InvalidKeyOwnershipProof: AugmentedError<ApiType>;
            /**
             * Attempt to signal GRANDPA pause when the authority set isn't live
             * (either paused or already pending pause).
             **/
            PauseFailed: AugmentedError<ApiType>;
            /**
             * Attempt to signal GRANDPA resume when the authority set isn't paused
             * (either live or already pending resume).
             **/
            ResumeFailed: AugmentedError<ApiType>;
            /**
             * Cannot signal forced change so soon after last.
             **/
            TooSoon: AugmentedError<ApiType>;
        };
        imOnline: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Duplicated heartbeat.
             **/
            DuplicatedHeartbeat: AugmentedError<ApiType>;
            /**
             * Non existent public key.
             **/
            InvalidKey: AugmentedError<ApiType>;
        };
        kton: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Beneficiary account must pre-exist
             **/
            DeadAccount: AugmentedError<ApiType>;
            /**
             * Value too low to create account due to existential deposit
             **/
            ExistentialDeposit: AugmentedError<ApiType>;
            /**
             * A vesting schedule already exists for this account
             **/
            ExistingVestingSchedule: AugmentedError<ApiType>;
            /**
             * Balance too low to send value
             **/
            InsufficientBalance: AugmentedError<ApiType>;
            /**
             * Transfer/payment would kill account
             **/
            KeepAlive: AugmentedError<ApiType>;
            /**
             * Account liquidity restrictions prevent withdrawal
             **/
            LiquidityRestrictions: AugmentedError<ApiType>;
            /**
             * Lock - POISONED
             **/
            LockP: AugmentedError<ApiType>;
            /**
             * Got an overflow after adding
             **/
            Overflow: AugmentedError<ApiType>;
            /**
             * Vesting balance too high to send value
             **/
            VestingBalance: AugmentedError<ApiType>;
        };
        proxy: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Account is already a proxy.
             **/
            Duplicate: AugmentedError<ApiType>;
            /**
             * Call may not be made by proxy because it may escalate its privileges.
             **/
            NoPermission: AugmentedError<ApiType>;
            /**
             * Cannot add self as proxy.
             **/
            NoSelfProxy: AugmentedError<ApiType>;
            /**
             * Proxy registration not found.
             **/
            NotFound: AugmentedError<ApiType>;
            /**
             * Sender is not a proxy of the account to be proxied.
             **/
            NotProxy: AugmentedError<ApiType>;
            /**
             * There are too many proxies registered or too many announcements pending.
             **/
            TooMany: AugmentedError<ApiType>;
            /**
             * Announcement, if made at all, was made too recently.
             **/
            Unannounced: AugmentedError<ApiType>;
            /**
             * A call which is incompatible with the proxy type's filter was attempted.
             **/
            Unproxyable: AugmentedError<ApiType>;
        };
        scheduler: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Failed to schedule a call
             **/
            FailedToSchedule: AugmentedError<ApiType>;
            /**
             * Cannot find the scheduled call.
             **/
            NotFound: AugmentedError<ApiType>;
            /**
             * Reschedule failed because it does not change scheduled time.
             **/
            RescheduleNoChange: AugmentedError<ApiType>;
            /**
             * Given target block number is in the past.
             **/
            TargetBlockNumberInPast: AugmentedError<ApiType>;
        };
        session: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Registered duplicate key.
             **/
            DuplicatedKey: AugmentedError<ApiType>;
            /**
             * Invalid ownership proof.
             **/
            InvalidProof: AugmentedError<ApiType>;
            /**
             * Key setting account is not live, so it's impossible to associate keys.
             **/
            NoAccount: AugmentedError<ApiType>;
            /**
             * No associated validator ID for account.
             **/
            NoAssociatedValidatorId: AugmentedError<ApiType>;
            /**
             * No keys are associated with this account.
             **/
            NoKeys: AugmentedError<ApiType>;
        };
        staking: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Stash is already bonded.
             **/
            AlreadyBonded: AugmentedError<ApiType>;
            /**
             * Rewards for this era have already been claimed for this validator.
             **/
            AlreadyClaimed: AugmentedError<ApiType>;
            /**
             * Controller is already paired.
             **/
            AlreadyPaired: AugmentedError<ApiType>;
            /**
             * Internal state has become somehow corrupted and the operation cannot continue.
             **/
            BadState: AugmentedError<ApiType>;
            /**
             * A nomination target was supplied that was blocked or otherwise not a validator.
             **/
            BadTarget: AugmentedError<ApiType>;
            /**
             * The call is not allowed at the given time due to restrictions of election period.
             **/
            CallNotAllowed: AugmentedError<ApiType>;
            /**
             * Duplicate index.
             **/
            DuplicateIndex: AugmentedError<ApiType>;
            /**
             * Targets cannot be empty.
             **/
            EmptyTargets: AugmentedError<ApiType>;
            /**
             * Attempting to target a stash that still has funds.
             **/
            FundedTarget: AugmentedError<ApiType>;
            /**
             * Incorrect previous history depth input provided.
             **/
            IncorrectHistoryDepth: AugmentedError<ApiType>;
            /**
             * Incorrect number of slashing spans provided.
             **/
            IncorrectSlashingSpans: AugmentedError<ApiType>;
            /**
             * Can not bond with value less than minimum balance.
             **/
            InsufficientValue: AugmentedError<ApiType>;
            /**
             * Invalid era to reward.
             **/
            InvalidEraToReward: AugmentedError<ApiType>;
            /**
             * Invalid number of nominations.
             **/
            InvalidNumberOfNominations: AugmentedError<ApiType>;
            /**
             * Slash record index out of bounds.
             **/
            InvalidSlashIndex: AugmentedError<ApiType>;
            /**
             * Can not schedule more unlock chunks.
             **/
            NoMoreChunks: AugmentedError<ApiType>;
            /**
             * Not a controller account.
             **/
            NotController: AugmentedError<ApiType>;
            /**
             * Items are not sorted and unique.
             **/
            NotSortedAndUnique: AugmentedError<ApiType>;
            /**
             * Not a stash account.
             **/
            NotStash: AugmentedError<ApiType>;
            /**
             * Can not rebond without unlocking chunks.
             **/
            NoUnlockChunk: AugmentedError<ApiType>;
            /**
             * Error while building the assignment type from the compact. This can happen if an index
             * is invalid, or if the weights _overflow_.
             **/
            OffchainElectionBogusCompact: AugmentedError<ApiType>;
            /**
             * The submitted result has unknown edges that are not among the presented winners.
             **/
            OffchainElectionBogusEdge: AugmentedError<ApiType>;
            /**
             * The election size is invalid.
             **/
            OffchainElectionBogusElectionSize: AugmentedError<ApiType>;
            /**
             * One of the submitted nominators has an edge to which they have not voted on chain.
             **/
            OffchainElectionBogusNomination: AugmentedError<ApiType>;
            /**
             * One of the submitted nominators is not an active nominator on chain.
             **/
            OffchainElectionBogusNominator: AugmentedError<ApiType>;
            /**
             * The claimed score does not match with the one computed from the data.
             **/
            OffchainElectionBogusScore: AugmentedError<ApiType>;
            /**
             * A self vote must only be originated from a validator to ONLY themselves.
             **/
            OffchainElectionBogusSelfVote: AugmentedError<ApiType>;
            /**
             * One of the submitted winners is not an active candidate on chain (index is out of range
             * in snapshot).
             **/
            OffchainElectionBogusWinner: AugmentedError<ApiType>;
            /**
             * Incorrect number of winners were presented.
             **/
            OffchainElectionBogusWinnerCount: AugmentedError<ApiType>;
            /**
             * The submitted result is received out of the open window.
             **/
            OffchainElectionEarlySubmission: AugmentedError<ApiType>;
            /**
             * One of the submitted nominators has an edge which is submitted before the last non-zero
             * slash of the target.
             **/
            OffchainElectionSlashedNomination: AugmentedError<ApiType>;
            /**
             * The submitted result is not as good as the one stored on chain.
             **/
            OffchainElectionWeakSubmission: AugmentedError<ApiType>;
            /**
             * Payout - INSUFFICIENT
             **/
            PayoutIns: AugmentedError<ApiType>;
            /**
             * The snapshot data of the current window is missing.
             **/
            SnapshotUnavailable: AugmentedError<ApiType>;
            /**
             * Too many nomination targets supplied.
             **/
            TooManyTargets: AugmentedError<ApiType>;
        };
        sudo: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Sender must be the Sudo account
             **/
            RequireSudo: AugmentedError<ApiType>;
        };
        system: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Failed to extract the runtime version from the new runtime.
             *
             * Either calling `Core_version` or decoding `RuntimeVersion` failed.
             **/
            FailedToExtractRuntimeVersion: AugmentedError<ApiType>;
            /**
             * The name of specification does not match between the current runtime
             * and the new runtime.
             **/
            InvalidSpecName: AugmentedError<ApiType>;
            /**
             * Suicide called when the account has non-default composite data.
             **/
            NonDefaultComposite: AugmentedError<ApiType>;
            /**
             * There is a non-zero reference count preventing the account from being purged.
             **/
            NonZeroRefCount: AugmentedError<ApiType>;
            /**
             * The specification version is not allowed to decrease between the current runtime
             * and the new runtime.
             **/
            SpecVersionNeedsToIncrease: AugmentedError<ApiType>;
        };
        technicalCommittee: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Members are already initialized!
             **/
            AlreadyInitialized: AugmentedError<ApiType>;
            /**
             * Duplicate proposals not allowed
             **/
            DuplicateProposal: AugmentedError<ApiType>;
            /**
             * Duplicate vote ignored
             **/
            DuplicateVote: AugmentedError<ApiType>;
            /**
             * Account is not a member
             **/
            NotMember: AugmentedError<ApiType>;
            /**
             * Proposal must exist
             **/
            ProposalMissing: AugmentedError<ApiType>;
            /**
             * The close call was made too early, before the end of the voting.
             **/
            TooEarly: AugmentedError<ApiType>;
            /**
             * There can only be a maximum of `MaxProposals` active proposals.
             **/
            TooManyProposals: AugmentedError<ApiType>;
            /**
             * Mismatched index
             **/
            WrongIndex: AugmentedError<ApiType>;
            /**
             * The given length bound for the proposal was too low.
             **/
            WrongProposalLength: AugmentedError<ApiType>;
            /**
             * The given weight bound for the proposal was too low.
             **/
            WrongProposalWeight: AugmentedError<ApiType>;
        };
        treasury: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * The tip was already found/started.
             **/
            AlreadyKnown: AugmentedError<ApiType>;
            /**
             * Proposer's balance is too low.
             **/
            InsufficientProposersBalance: AugmentedError<ApiType>;
            /**
             * Invalid bounty fee.
             **/
            InvalidFee: AugmentedError<ApiType>;
            /**
             * No proposal or bounty at that index.
             **/
            InvalidIndex: AugmentedError<ApiType>;
            /**
             * Invalid bounty value.
             **/
            InvalidValue: AugmentedError<ApiType>;
            /**
             * The account attempting to retract the tip is not the finder of the tip.
             **/
            NotFinder: AugmentedError<ApiType>;
            /**
             * A bounty payout is pending.
             * To cancel the bounty, you must unassign and slash the curator.
             **/
            PendingPayout: AugmentedError<ApiType>;
            /**
             * The tip cannot be claimed/closed because it's still in the countdown period.
             **/
            Premature: AugmentedError<ApiType>;
            /**
             * The reason given is just too big.
             **/
            ReasonTooBig: AugmentedError<ApiType>;
            /**
             * Require bounty curator.
             **/
            RequireCurator: AugmentedError<ApiType>;
            /**
             * The tip cannot be claimed/closed because there are not enough tippers yet.
             **/
            StillOpen: AugmentedError<ApiType>;
            /**
             * The bounty status is unexpected.
             **/
            UnexpectedStatus: AugmentedError<ApiType>;
            /**
             * The tip hash is unknown.
             **/
            UnknownTip: AugmentedError<ApiType>;
        };
        vesting: {
            [key: string]: AugmentedError<ApiType>;
            /**
             * Amount being transferred is too low to create a vesting schedule.
             **/
            AmountLow: AugmentedError<ApiType>;
            /**
             * An existing vesting schedule already exists for this account that cannot be clobbered.
             **/
            ExistingVestingSchedule: AugmentedError<ApiType>;
            /**
             * The account given is not vesting.
             **/
            NotVesting: AugmentedError<ApiType>;
        };
    }
    interface DecoratedErrors<ApiType extends ApiTypes> extends AugmentedErrors<ApiType> {
        [key: string]: ModuleErrors<ApiType>;
    }
}
