"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typesBundleForPolkadot = exports.jsonrpc = exports.types = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _spec = _interopRequireDefault(require("@darwinia/types-known/spec"));

var _definitions = _interopRequireDefault(require("../interfaces/balances/definitions"));

var _definitions2 = _interopRequireDefault(require("../interfaces/darwiniaInject/definitions"));

var _definitions3 = _interopRequireDefault(require("../interfaces/headerMMR/definitions"));

var _definitions4 = _interopRequireDefault(require("../interfaces/proxy/definitions"));

var _definitions5 = _interopRequireDefault(require("../interfaces/relayerGame/definitions"));

var _definitions6 = _interopRequireDefault(require("../interfaces/staking/definitions"));

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const polkadotCompatibleTypes = {
  BalanceLock: {
    id: 'LockIdentifier',
    lockFor: 'LockFor',
    reasons: 'Reasons',
    amount: 'Balance'
  },
  StakingLedgerT: {
    stash: 'AccountId',
    activeRing: 'Compact<Balance>',
    activeDepositRing: 'Compact<Balance>',
    activeKton: 'Compact<Balance>',
    depositItems: 'Vec<TimeDepositItem>',
    ringStakingLock: 'StakingLock',
    ktonStakingLock: 'StakingLock',
    claimedRewards: 'Vec<EraIndex>',
    total: 'Compact<Balance>',
    active: 'Compact<Balance>',
    unlocking: 'Vec<UnlockChunk>'
  },
  IndividualExposure: {
    who: 'AccountId',
    ringBalance: 'Compact<Balance>',
    ktonBalance: 'Compact<Balance>',
    power: 'Power',
    value: 'Compact<Balance>'
  }
};
const definitions = {
  balances: _definitions.default,
  darwiniaInject: _definitions2.default,
  headerMMR: _definitions3.default,
  proxy: _definitions4.default,
  relayerGame: _definitions5.default,
  staking: _definitions6.default
};

const types = _objectSpread({}, (0, _utils.typesFromDefinitions)(definitions));

exports.types = types;
const jsonrpc = (0, _utils.jsonrpcFromDefinitions)(definitions); // NOTE: The mapping is done from specName in state.getRuntimeVersion

exports.jsonrpc = jsonrpc;

function getBundleFromSpecName(specName, isPolkadotCompatible) {
  return {
    alias: {},
    rpc: jsonrpc,
    types: [..._spec.default[specName]].map(version => {
      return {
        minmax: version.minmax,
        types: _objectSpread(_objectSpread(_objectSpread({}, types), version.types), isPolkadotCompatible ? polkadotCompatibleTypes : [])
      };
    })
  };
}

const typesBundleForPolkadot = {
  spec: {
    crab: getBundleFromSpecName('Crab', true),
    darwinia: getBundleFromSpecName('Darwinia', true),
    pangolin: getBundleFromSpecName('Pangolin', true)
  }
};
exports.typesBundleForPolkadot = typesBundleForPolkadot;