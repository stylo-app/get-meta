"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typesFromDefinitions = typesFromDefinitions;
exports.jsonrpcFromDefinitions = jsonrpcFromDefinitions;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Copyright 2017-2021 authors & contributors
// SPDX-License-Identifier: Apache-2.0
function typesFromDefinitions(definitions, initTypes = {}) {
  return Object.values(definitions).reduce((res, {
    types
  }) => _objectSpread(_objectSpread({}, res), types), initTypes);
}

function jsonrpcFromDefinitions(definitions) {
  const jsonrpc = {};
  Object.keys(definitions).filter(key => Object.keys(definitions[key].rpc || {}).length !== 0).forEach(section => {
    if (!jsonrpc[section]) {
      jsonrpc[section] = {};
    }

    Object.entries(definitions[section].rpc).forEach(([method, def]) => {
      const isSubscription = !!def.pubsub;
      jsonrpc[section][method] = _objectSpread(_objectSpread({}, def), {}, {
        isSubscription,
        jsonrpc: `${section}_${method}`,
        method,
        section
      });
    });
  });
  return jsonrpc;
}